# -*- coding: utf-8 -*-
""" –ú–æ–¥—É–ª—å —É—Ç–∏–ª–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü –≥—Ä–∞—Ñ–∏–∫–æ–≤ """

import os
from datetime import datetime
from typing import Union, List, Tuple
import re

import openpyxl
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from log_settings import log
from models.db import Users, UrlGoogleSheets_month, GroupId
from config_reader import config


file_path = os.path.join(os.path.abspath('files'), f"data.xlsx")
# –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≥—É–≥–ª
credentials_file_path = config.google_credentials_file_path

async def get_today_employees(file_path: Union[str, bool], day: str) -> str:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É .xlsx –ø–æ –∞–¥—Ä–µ—Å—É, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:
    [–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–∞–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è] ->  [–Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç–æ–ª–±–µ—Ü —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π] ->
    -> [–ü—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ 1-–º—É —Å—Ç–æ–ª–±—Ü—É –∏ –∑–∞–Ω–æ—Å–∏—Ç –≤—Å–µ—Ö —É –∫–æ–≥–æ —Å—Ç–æ—è—Ç —á–∞—Å—ã(—Ü–∏—Ñ—Ä—ã) –≤ —Å—Ç–æ–ª–±—Ü–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π]
    –î–µ–Ω—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º (str).
    :param file_path: –∞–¥—Ä–µ—Å —Ñ–∞–π–ª–∞
    :param day: –¥–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä - 01
    """
    # –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Å—Å—ã–ª–∫–∏
    if file_path is False:
        return "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞"

    wb = openpyxl.load_workbook(file_path)                  # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ Excel
    sheet = wb.active                                       # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    chosen_day_column: Union[int, None] = None              # –°—Ç–æ–ª–±–µ—Ü —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π

    # –ø–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π - today_date_column
    for row in range(1, sheet.max_row + 1):
        days_list: List[Tuple[int, int]] = []
        flag: bool = False
        # –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–µ, —Å–±–æ—Ä –≤—Å–µ—Ö –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ [days_list]
        for col in range(1, sheet.max_column + 1):
            text_cell = sheet.cell(row=row, column=col).value
            if text_cell and isinstance(text_cell, str):
                # —à–∞–±–ª–æ–Ω –¥–ª—è —á–∏—Å–ª–∞ 01-31
                pattern = r'\b(?:0[1-9]|[12]\d|3[01])\b'
                day_from_column = ''.join(re.findall(pattern, text_cell))
                if day_from_column:
                    days_list.append((col, int(day_from_column)))
        # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª 30 –∏–ª–∏ 31
        if len(days_list) in [30, 31]:
            for col, d in days_list:
                if int(day) == d:
                    chosen_day_column = col   # –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º
                    # log.critical(chosen_day_column)
                    print(f'day input={int(day)}, day from column={int(d)}')
                    flag = True
                    break
        if flag: break
    if chosen_day_column is None:
        log.critical(f"In sheets row not today date ({day})")
        return f"–ù–∞ –ª–∏—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å üìÜ <code>({day})</code>"

    # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥—è—Ç
    work_list = str()
    work_list += f'<b>{day if day else today_date} —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–π—Ç–∏:</b>\n'
    # print("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥—è—Ç:")
    for row in range(1, sheet.max_row + 1):
        employee_name = sheet.cell(row=row, column=1).value
        if not employee_name:
            continue

        # –≤—ã—è–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –∫–∞–ø—Å –ª–æ–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
        if employee_name and any(word.isupper() for word in employee_name.split()) or employee_name.isupper():
            words = re.split(r'[^\w]+', employee_name)                          # —Å–ø–ª–∏—Ç –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            employee_name = ' '.join(w for w in words if w.isupper() or w.isdigit())    # –¥–∂–æ–π–Ω —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –∏ –∫–∞–ø—Å–æ–≤
            work_list += '\n' + '<b>' + employee_name + ':' + '</b>' + '\n'
            continue

        # –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ü–∏—Ñ—Ä–∞ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
        cell = sheet.cell(row=row, column=chosen_day_column).value
        if cell and str(cell).isdigit():
            work_list += f'‚Ä¢ {employee_name}\n'
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel
    wb.close()
    return work_list


async def save_google_sheet_locally(google_sheets_url: str = None, month: str = None, session: AsyncSession = None,
                              credentials=credentials_file_path) -> Union[str, bool]:
    """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã –ª–æ–∫–∞–ª—å–Ω–æ. –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω url, –±–µ—Ä–µ—Ç –∏–∑ –±–¥ –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É 'month'.
    –ú–µ—Å—è—Ü 'month' –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º - '01' """
    try:
        # –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –ø–æ –º–µ—Å—è—Ü—É
        if not google_sheets_url:
            query = await session.execute(select(UrlGoogleSheets_month).filter_by(month=month))
            row = query.scalar()
            print(row)

            if row:
                log.warning(f"url for download google sheets - {row.url_google_sheets}")
                if row.url_google_sheets:
                    google_sheets_url = row.url_google_sheets
                elif row.path_file:
                    return row.path_file
            else:
                return False

        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏
        spreadsheet_id = google_sheets_url.split('/')[-2]
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        credentials = ServiceAccountCredentials.from_json_keyfile_name(credentials, scope)
        gc = gspread.authorize(credentials)
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
        # worksheet = gc.open_by_url(google_sheets_url).sheet1
        worksheet = gc.open_by_key(spreadsheet_id).sheet1
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        data = worksheet.get_all_values()

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
        wb = openpyxl.Workbook()
        ws = wb.active
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–∞
        for row in data:
            row_as_numbers = [float(cell) if cell.replace('.', '', 1).isdigit() else cell for cell in row]
            ws.append(row_as_numbers)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–∫–∞–ª—å–Ω–æ
        wb.save(file_path)
        wb.close()
        log.warning(f'save table locally {file_path}')
        return file_path

    except Exception as exc:
        log.exception(Exception)
        return False


